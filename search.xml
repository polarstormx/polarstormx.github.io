<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>王者荣耀积分机制计算</title>
      <link href="/2020/03/11/wang-zhe-rong-yao-ji-fen-ji-zhi-ji-suan/"/>
      <url>/2020/03/11/wang-zhe-rong-yao-ji-fen-ji-zhi-ji-suan/</url>
      
        <content type="html"><![CDATA[<p>写这篇文章的原因是前一阵子，好友g某因为太菜惹了女友生气，要求他必须上了王者才可以继续一起双排，于是帮他算算在王者荣耀的机制下，胜率与上分效率的关系。</p><p>假设一个玩家的胜率为$p(0&lt;=p&lt;=1)$，平均每局的勇者积分为$s(s\in N)$，积分达到$a(a \in N^+)$后保星。经历$k(k \in N^+)$局后，他获得的星数为$n(n \in Z)$。</p><p>首先易知，每经历$\frac{a}{s}$局，积分达到一次保星。<br>忽略人为因素，我们认为这$k$局中局与局之间没有影响，胜负情况满足伯努利分布,即概率质量函数为：<br>$$<br>f_X(x)=p^x (1-p)^{1-x}<br>$$<br>那么胜利局数期望为：<br>$$<br>E[X]=\sum_{i=0}^1 x_i f_X(x)=p<br>$$<br>同理,失败局数期望为$1-p$<br>k局后，通过胜负得到的星数:<br>$$<br>n_1=k[p-(1-p)]=2pk-k<br>$$<br>通过积分避免失去的星数：<br>$$<br>n_2=\frac{ks}{a}<br>$$<br>则：<br>$$<br>n=n_1+n_2=2pk-k+\frac{ks}{a}\tag{1}<br>$$<br>接下来结合游戏考察常量。<br>对于保星分数$s$查询得到结果如下：</p><table><thead><tr><th align="center">段位</th><th align="center">保星分数</th><th align="center">升段所需星数</th></tr></thead><tbody><tr><td align="center">青铜</td><td align="center">60</td><td align="center">9</td></tr><tr><td align="center">白银</td><td align="center">60</td><td align="center">9</td></tr><tr><td align="center">黄金</td><td align="center">80</td><td align="center">16</td></tr><tr><td align="center">铂金</td><td align="center">150</td><td align="center">16</td></tr><tr><td align="center">钻石</td><td align="center">300</td><td align="center">25</td></tr><tr><td align="center">星耀</td><td align="center">300</td><td align="center">25</td></tr><tr><td align="center">王者</td><td align="center">350</td><td align="center"></td></tr></tbody></table><p>对于每局的平均加分，现有加分机制如下：</p><table><thead><tr><th align="center">段位</th><th align="center">加分</th></tr></thead><tbody><tr><td align="center">无挂机行为</td><td align="center">3</td></tr><tr><td align="center">金牌</td><td align="center">50</td></tr><tr><td align="center">银牌</td><td align="center">25</td></tr><tr><td align="center">虽败犹荣</td><td align="center">？</td></tr><tr><td align="center">实力较强</td><td align="center">？</td></tr></tbody></table><p>之外，还有连胜奖励与队伍评分奖励：</p><table><thead><tr><th align="center">连胜</th><th align="center">加分</th><th align="center">局内评分</th><th align="center">加分</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">3</td><td align="center">第1</td><td align="center">5</td></tr><tr><td align="center">2</td><td align="center">5</td><td align="center">第2</td><td align="center">4</td></tr><tr><td align="center">3</td><td align="center">10</td><td align="center">第3</td><td align="center">4</td></tr><tr><td align="center">4</td><td align="center">15</td><td align="center">第4</td><td align="center">3</td></tr><tr><td align="center">5及以上</td><td align="center">20</td><td align="center">第5</td><td align="center">3</td></tr></tbody></table><p>虽败犹荣与实力较强官方没有给出具体数据，就已知数据而言，每局有无挂机的3分，局内评分平均$\frac{5+4+4+3+3}{5}=3.8$分。</p><p>计算连胜奖励分，方便起见，记失败概率为$q=1-p$,对于第m局，此局无连胜的概率为第m局胜利、第m-1局失败的概率$pq$,此局1连胜的概率为第m局与第m-1局获胜且第m-2局失败的概率$p^2q$…4连胜概率为$p^5q$,五连胜及以上的概率为$p^6$<br>$$<br>E=\sum 3qp^2+5qp^3+10qp^4+15qp^5+20p^6<br>$$<br>显然这个式子很不直观，因此我们通过excel绘制p从0至1的奖励分期望：</p><p><img src="//polarstormx.github.io/2020/03/11/wang-zhe-rong-yao-ji-fen-ji-zhi-ji-suan/pasted-0.png" alt=""></p><p>可以看到当胜率很高时会获得相当多的连胜奖励分，但由于elo系统会使你的胜率在50%附近，我们观察胜率为0.4-0.6的连胜分：</p><table><thead><tr><th align="center">胜率</th><th align="center">连胜分期望</th></tr></thead><tbody><tr><td align="center">0.4</td><td align="center">0.80768</td></tr><tr><td align="center">0.45</td><td align="center">1.12856</td></tr><tr><td align="center">0.5</td><td align="center">1.54688</td></tr><tr><td align="center">0.55</td><td align="center">2.08783</td></tr><tr><td align="center">0.6</td><td align="center">2.78208</td></tr></tbody></table><p>实际上大部分玩家在此部分获得的分数为1.5分左右</p><p>对于金牌和银牌加分比较难估计，为此我们查看王者营地给出的英雄金牌榜，可以发现场均金牌从0.04到0.25（<del>无敌的蒙犽</del>）不等，计算得出平均值为0.08，当然如果你不常玩榜底的那些冷门英雄时，这个数字还会有所提高。由于没有银牌榜，那么只能进行估算，其难度比金牌低，因此估测为金牌的1.5倍，即场均0.12。这样我们通过金银牌获得的加分为$0.08*50+0.12*25=7</p><p>至此，我们已经拥有了3+3.8+1.5+7=15.3分，至于虽败犹荣与实力较强，为便于计算，每个计为2.35分，这样总共我们得到的$s=15.3+2.35*2=20$</p><p>正式的计算终于开始了，回到我们的问题，一个胜率为50%的人，上分效率如何呢？<br>我们将p=0.5，s=20，各段位的保星分数a与所需星数n代入(1)式<br>例如白银的a为60，n为9:<br>$$<br>9=2*0.5k-k+\frac{20k}{60}<br>$$</p><p>解得k=27<br>于是我们计算得到下表：</p><table><thead><tr><th align="center">段位</th><th align="center">局数</th></tr></thead><tbody><tr><td align="center">白银3-黄金4</td><td align="center">27</td></tr><tr><td align="center">黄金4-铂金4</td><td align="center">64</td></tr><tr><td align="center">铂金4-钻石5</td><td align="center">120</td></tr><tr><td align="center">钻石5-星耀5</td><td align="center">375</td></tr><tr><td align="center">星耀5-王者</td><td align="center">375</td></tr></tbody></table><p>当然由于有着排位保护卡以及晋级赛失败的加分机制，譬如刚到钻石和刚到星耀的5张保护卡以及活动的几张保护卡，至少可以使钻石到王者的路上少掉7-8星。</p><p>好的，那么小明赛季初钻五开打，尽管小明打的比较菜鸡，但在elo系统的庇护下，维持着的50%的胜率，加上保护卡等因素，我们计他需要375+375-100=650场。一场比赛平均记为25分钟，共需约270小时，一个赛季3个月90天，每天需要3个小时重度游戏，小明成功晋级王者<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8">👏</span></p><p>那么如果小明再顶一些呢？<br>小明认真阅读了英雄技能，看了看攻略，每局认真游戏，他在钻石星耀的胜率提升到了55%。当然随着胜率的上升，每局的加分也会相应上升，我们粗略认为他的s提升到了25。首次上钻石和星耀5张，战令2张保护卡，于是n减去7<br>直接计算钻5到王者：<br>$$<br>25+25-7=2*0.55k-k+\frac{25k}{300}<br>$$<br>解得$k\approx 234$<br>那么此时需要97小时的游戏时间，一个赛季的话需要每天打2-3局。</p><p>那么如果小明请代练呢？<br>小明不满上分效率，去某宝请了一个代练。代练大杀四方，场均金银牌，胜率80%，加分s平均50。<br>$$<br>25+25-7=2*0.8k-k+\frac{50k}{300}<br>$$<br>解得k=30<br>此时两三个晚上便可王者。</p><p>最后，小明需要多坑才会稳定掉段呢？<br>既然比较坑，s降为15，将(1)式变形<br>$$<br>k=\frac{an}{2ap-a+s}<br>$$<br>$k\rightarrow \infty$时，$n&lt;0$,即<br>$$<br>p&lt;0.5-\frac{s}{2a}<br>$$</p><table><thead><tr><th align="center">段位</th><th align="center">稳定掉星所需胜率</th></tr></thead><tbody><tr><td align="center">白银</td><td align="center">37.5%</td></tr><tr><td align="center">黄金</td><td align="center">40.6%</td></tr><tr><td align="center">铂金</td><td align="center">45%</td></tr><tr><td align="center">钻石</td><td align="center">47.5%</td></tr><tr><td align="center">星耀</td><td align="center">47.5%</td></tr><tr><td align="center">王者</td><td align="center">47.9%</td></tr></tbody></table><p>可以看到排位机制还是比较友好的，只要你可以保证高于上面这些胜率，基本就能够稳定上分了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客的建立及优化过程</title>
      <link href="/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/"/>
      <url>/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p>建立这个博客的过程中碰到了一系列的问题，这个网站也经过了许多的完善及优化才变成当前这个模样，本篇记录了每次优化以及问题修复的过程。　　</p><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><p>　　本博客采用的<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>架构，使用了<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a>主题，部署在<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>上，莫得钱买域名，所以就用着原本的网址。由于国内访问github较慢，使用了<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr</a>提供的免费的cdn加速服务。</p><h2 id="优化历程"><a href="#优化历程" class="headerlink" title="优化历程"></a>优化历程</h2><h3 id="1-音乐播放器"><a href="#1-音乐播放器" class="headerlink" title="1 音乐播放器"></a>1 音乐播放器</h3><p>　　matery主题内置了音乐播放器，在主题的_config.yml文件中将music.enable设置为true即可开启：</p><p><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-0.png" alt=""><br>　　但在切换为网易云的源后，发现歌曲名居然和背景一样几乎是白色，基本看不清，为了改变颜色，我们找到负责此处的css文件，位置是/source/libs/aplayer/APlayer.min.css，将其中的<br><code>.aplayer-title{font-size:14px}</code>改为<code>.aplayer-title{font-size:14px;color:#666}</code>，当然color可以自己随意选择，上方播放列表里的歌名也为白色，但css文件里没有关于此部分的颜色设置，于是需要自己再加上<code>.aplayer-list-title{color:#666}</code></p><h3 id="2-开启评论区"><a href="#2-开启评论区" class="headerlink" title="2 开启评论区"></a>2 开启评论区</h3><p>　　matery内置了几种评论插件，有gittalk、gitment、来比力等，我选择了<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>，因为这个插件游客不需要登录即可评论，之后使用了<a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>(by @zhaojun1998)的邮件提醒功能，在<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>进行设置后，当有人发布了评论后，我的邮箱会收到提醒：<br><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-1.png" alt=""><br>同样，在你填写了邮箱后评论，你的邮箱也会收到邮件：</p><p><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-2.png" alt=""><br>但是由于leancloud免费版无法每天24小时运行，在0-7点无法进行邮件提醒。</p><h3 id="3-代码高亮及行号"><a href="#3-代码高亮及行号" class="headerlink" title="3 代码高亮及行号"></a>3 代码高亮及行号</h3><p>　　hexo自带代码高亮的功能，但是为了更加美观，安装了<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a>插件，之后将 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'vscode'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true"># default false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　其中theme为具体高亮类型，内置了几种主题，也可以自行添加喜欢的高亮主题，本博客用的是类似vscode drak模式下的颜色，<br>　　搜索你想要的高亮主题的css文件，将其放置在\node_modules\prismjs\themes下，并改名为<code>prism-***.css</code>,再更改配置文件的<code>prism_plugin.theme</code>为***即可，像我此处文件为<code>prism-vscode.css</code>，配置为<code>theme: 'vscode'</code>。<br>　　切记使用此插件需要使用hexo默认的marked渲染器我当时安装了markdown-it作为渲染器，导致行号显示不正常。</p><h3 id="4-看板娘"><a href="#4-看板娘" class="headerlink" title="4 看板娘"></a>4 看板娘</h3><p>　　作为一个老二次元，一个看板娘是博客的必须品，这里使用了一个功能比自带看板娘更加丰富的<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">版本</a>，在基础上增加了不少新功能。部署的话也不是很难，可以直接在网页内添加对原作者项目的引用，即在<code>&lt;head&gt;</code>或<code>&lt;body&gt;</code>标签内添加如下代码</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然由于此插件需要 Font Awesome 4.7.0 支持，需要加载相关样式表，在 <code>&lt;head&gt;</code>中加入：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>否则无法正常显示。（如果网页中已经加载了 Font Awesome，就不要重复加载了）<br>　　也可以将此插件放到服务器上而非cdn加载，本博客也是这么做的，下载下此项目，放置在主题的source文件夹下，并修改<code>autoload.js</code>文件,更改path</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/";</span><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"/live2d-widget/"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　对于matery主题，修改前端页面时，<code>&lt;head&gt;</code>部分的文件在themes\matery\layout_partial\head.ejs，加入</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/live2d-widget/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来开启看板娘。看板娘的位置大小等属性在live2d-widget/waifu.css中更改，像此处就将其从默认的左侧移动到了右侧。其行为模式在waifu-tips.js中修改。如果想进一步更改外形等选项，需要在autoload.js中修改其API，默认使用的是原作者提供的<a href="" https:="" github.com="" fghrsh="" live2d_api""="">API</a>,想进一步修改需要自己搭建API。</p><h3 id="5-可视化博客编辑"><a href="#5-可视化博客编辑" class="headerlink" title="5 可视化博客编辑"></a>5 可视化博客编辑</h3><p>　　用原生的方法编辑博客是很不方便的，即直接修改_post文件下的.md文件来进行博客编辑，这时可以安装hexo-admin插件进行可视化的编辑，使用时执行<code>hexo s -d</code>,网页登录<code>http://localhost:4000/admin</code>即可,效果如下图：</p><p><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-4.png" alt=""><br>此时在编辑页面中粘贴图片会自动生成如下的链接并在image文件夹下生成图片文件</p><pre class="line-numbers language-markdown"><code class="language-markdown">![](\\images\pasted-0.png\)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在windows下这个格式无法正常显示图片，需手动将斜杠更换为如下形式</p><pre class="line-numbers language-markdown"><code class="language-markdown">![](pasted-0.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可正常显示。<br>　　但当博客变多后，所有图片放在一个文件夹会非常杂乱，于是我们可以安装<code>hexo-asset-image</code>插件，这样在新建博客时会自动在_posts文件夹下建立与文章同名的文件夹，将图片放在此文件下，博客中可以通过间接位置引用图片，十分方便，像之前的图片引用可直接写为：</p><pre class="line-numbers language-markdown"><code class="language-markdown">![](pasted-0.png) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-pjax无刷新加载"><a href="#6-pjax无刷新加载" class="headerlink" title="6 pjax无刷新加载"></a>6 pjax无刷新加载</h3><p>　　在使用音乐与看板娘时发现了一个较为麻烦的问题：在网页上点击跳转后，音乐与看板娘组件重新加载，会导致音乐中断并重新播放，解决方法是采用<a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener">pjax</a>技术，pjax 的工作原理是通过 ajax 从服务器端获取 HTML，在页面中用获取到的 HTML 替换指定容器元素中的内容。然后使用 pushState 技术更新浏览器地址栏中的当前地址。这样博客跳转时只刷新不同的部分，音乐，看板娘等无需进行刷新。不仅解决了音乐中断的问题，这种方式也可以加快网页的加载。<br>　　首先通过npm下载jquery-pjax组件，将其放在主题的source文件夹下,我此处放在了source/libs下,之后需要在前端加载其js文件收是在head.ejs文件中,添加</p><pre class="line-numbers language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/libs/jquery-pjax/jquery.pjax.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　要注意的是pjax需要jquery组件的支持，因此此条语句一定要放在jquery的加载语句之后，否则无法正确执行。<br>　　之后，添加pjax的命令，在<code>&lt;head&gt;</code> <code>&lt;body&gt;</code>中均可，如下</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pjax</span><span class="token punctuation">(</span><span class="token string">'a[target!=_blank]'</span><span class="token punctuation">,</span> <span class="token string">'#pjax-container'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        fragment<span class="token punctuation">:</span> <span class="token string">'#pjax-container'</span><span class="token punctuation">,</span>        timeout<span class="token punctuation">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// pjax 加载完成要做的操作</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:start'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// pjax 加载开始需要做的操作 </span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:end'</span><span class="token punctuation">,</span>   <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// pjax 加载结束需要做的操作 </span>      <span class="token comment" spellcheck="true">// 其他操作;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里指定进行不为新窗口跳转时，只有id为<code>pjax-container</code>的部分进行刷新。对比网页跳转时的改变，发现网页最上方的header以及最下方的footer部分是不需要刷新的，而音乐和看板娘组件也正好在footer标签中。于是将需要刷新的主体body部分使用id为<code>pjax-container</code>的标签包裹。对layout/layout.ejs进行修改,将</p><pre class="line-numbers language-ejs"><code class="language-ejs"><%- partial('_partial/header') %><%- body %><%- partial('_partial/footer') %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-ejs"><code class="language-ejs"><%- partial('_partial/header') %><div id="pjax-container"><%- body %></div><%- partial('_partial/footer') %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样网页跳转时只有被包裹的部分进行刷新。<br>　　但这样加载后会出现问题，因为在pjax中是局部刷新的，一些js插件没有收到页面的加载信号不会被执行。最明显的是评论组件在页面跳转后失效。<br>　　为了修复这个问题，在stackoverflow查看了一些有关pjax的问题，最初的想法是在pjax加载后，重新执行valine的初始化函数，但是valine公布的js是min.js的格式，经历过压缩，变量名全部替换成了a、b、c等且if都被优化成了诸如a?b:c的形式，尝试阅读了一阵子源码后只好放弃。但突然发现其实valine的初始化是在pjax的刷新容器内的，valine初始化是正确的，问题在于依赖的leancloud的av对象不支持重新初始化，尝试重新执行av-min.js也会出错。<br>　　幸运的是，在github该项目下，有人在issue中提出过使用pjax不兼容的问题，作者在去年给出了解决方案，即在valine的初始化选项中加入path选项，下图是官网的描述：<br><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-5.png" alt=""><br>　　这样一来，valine就可以根据当前的url来判断从av对象的哪一部分来获得正确的评论。然而令人头疼的是文章下的评论正常工作，但留言板却读取不到评论内容。由于没上过前端开发的课程，对相关的调试不是很熟悉，磕磕绊绊地经过一阵子排查后，在leancloud发现通过pjax跳转到的评论页的url与直接刷新的不同：</p><p><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-6.png" alt=""><br>　　容易看到pjax跳转到的contact后面缺少一个’/‘。这正是读取不到评论的罪魁祸首。<br>　　接下来的工作就很容易了，通过阅读layout文件夹下的ejs文件，定位到href生成的地方：<br><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-7.png" alt=""><br>　　在url后加上’/‘即可。<br><img src="//polarstormx.github.io/2020/03/05/bo-ke-de-jian-li-ji-you-hua-guo-cheng/pasted-8.png" alt=""></p><h3 id="7-开启Mathjax数学公式渲染"><a href="#7-开启Mathjax数学公式渲染" class="headerlink" title="7 开启Mathjax数学公式渲染"></a>7 开启Mathjax数学公式渲染</h3><p>　　markdown本身无法进行数学公式的渲染，需要借助MathJax。Matery主题自带了MathJax功能，由于加载耗时，只有需要时在文章的Front-matter设置开启。但（…）也会被默认被识别为行内公式内容，于是我们需要去<code>post.ejs</code>中，将</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token operator">&lt;</span>script<span class="token operator">></span>      MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         tex2jax<span class="token punctuation">:</span> <span class="token punctuation">{</span>inlineMath<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'\('</span><span class="token punctuation">,</span> <span class="token string">'\)'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为z</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token operator">&lt;</span>script<span class="token operator">></span>      MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         tex2jax<span class="token punctuation">:</span> <span class="token punctuation">{</span>inlineMath<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Typeset"</span><span class="token punctuation">,</span>MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到我们在下方又添加了一行<code>MathJax.Hub.Queue(["Typeset",MathJax.Hub]);</code>这是因为使用了pjax，需要在页面变化后重新加载MathJax的渲染，否则在跳转后公式会显示错误。</p><h3 id="其余小修改"><a href="#其余小修改" class="headerlink" title="其余小修改"></a>其余小修改</h3><ul><li>导航栏绿色不太搭配，改为与背景图片轮换的颜色。修改了<code>matery.css</code>中的<code>.bg-color</code>项</li><li>歌词与最下方文字重叠，改至右上方。修改了<code>Aplayer.min.css</code>中的<code>.aplayer.aplayer-fixed .aplayer-lrc</code>项，手机端维持原样。</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　如果发现了博客有关的bug或是相关的建议，欢迎在此篇的评论区或者留言板留言，有相关问题也可以互相交流。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8">😑</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code test</title>
      <link href="/2020/03/03/code-test/"/>
      <url>/2020/03/03/code-test/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">object</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> knot<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> temp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> temp2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u <span class="token operator">>=</span> knot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> knot<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u <span class="token operator">>=</span> knot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> knot<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>knot<span class="token punctuation">[</span>i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> knot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp1 <span class="token operator">=</span> <span class="token function">Base</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> knot<span class="token punctuation">,</span> num<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp1 <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">-</span> knot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>temp1 <span class="token operator">/</span> <span class="token punctuation">(</span>knot<span class="token punctuation">[</span>i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> knot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>knot<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">!=</span> knot<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp2 <span class="token operator">=</span> <span class="token function">Base</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> knot<span class="token punctuation">,</span> num<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp2 <span class="token operator">=</span> <span class="token punctuation">(</span>knot<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> u<span class="token punctuation">)</span> <span class="token operator">*</span> temp2 <span class="token operator">/</span> <span class="token punctuation">(</span>knot<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">-</span> knot<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp1 <span class="token operator">+</span> temp2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*int N = 4;    int K = 3;    double knots[100];    for (int i = 0; i &lt; N + K + 1; i++)    {        knots[i] = i;    }    cout &lt;&lt; Base(0,K,knots,N+K+1,0.6);*/</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//向N中填充二项式系数用于计算</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            r <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            r <span class="token operator">/</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        N<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token operator">*</span>yizhi<span class="token punctuation">;</span>    yizhi <span class="token operator">=</span> <span class="token keyword">new</span> object<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单爬虫：乃木坂图库(上)(逻辑分析部分)</title>
      <link href="/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/"/>
      <url>/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/</url>
      
        <content type="html"><![CDATA[<p>最近几天，由于肖战粉丝举报ao3平台导致的“227大团结”事件，使得大家一度人人自危，担心某天自己喜欢的东西也因为上边的某个“政策”被删除或隔之墙外。最近由于疫情，托朋友买的花花写真没有到手 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>，只能在网上看看别人的扫图，联系到这个事件，便有了将图片下载下来保存（防止某天被封）的念头。于是乎，便写了一个爬虫，也就有了这篇文章。</p><p>　　目标网站是 <a href="https://www.nogizaka46.net.cn/pic/memSelect.html" target="_blank" rel="noopener">https://www.nogizaka46.net.cn/pic/memSelect.html</a> 。</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-1.png" alt="">  </p><p>　　进入网站后会显示不同成员的合集，点击图片后会跳转到相应的合集，此时url变化为 nogizaka46.net.cn/pic/memberInfo.html 后面的参数name=*区别了不同合集。  </p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-2.png" alt="">  </p><p>　　当然直接查看网页的showpic.js文件也可以得出这个结论。  </p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-3.png" alt="">  </p><p>　　查看网页的html代码，很容易找到图片对应的位置，如下图  </p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-4.png" alt="">  </p><p>　　此时理论上已经可以爬取图片，但发现在此页面中，点击左侧的图片可以切换右侧的具体合集，并且页面向下滚动至底时，会加载新的图片。因此直接爬取无法得到第一页之后的图片。此过程中url未发生变化，无法通过url的变化直接获得后边图片，猜测网页应该运用了ajax技术，于是继续查看网页的js代码。</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-5.png" alt="">  </p><p>　　可以发现图片的地址是从nogizaka/getImageUrl获取的，查看网页的网络请求记录，我们可以找到一个GET请求，同样是name=*的方式获取相应合集的图片地址。  </p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-6.png" alt=""></p><p>　　直接在浏览器输入name为ikuta_protrait1的URL，不出所料，我们得到了此合集的所有图片地址。</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-7.png" alt=""></p><p>　　那我们如何获得所有合集对应的name呢？其实和上边的原理相同，可以看到是通过/pic/pic_group/getMemberInfo得到所有的合集名称。</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-9.png" alt=""></p><p>　　同样，在网络请求记录也可以找到这条请求:</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-8.png" alt=""></p><p>　　于是便得到了合集的名称:</p><p><img src="//polarstormx.github.io/2020/03/02/jian-dan-pa-chong-nai-mu-ban-tu-ku-1/pasted-10.png" alt=""></p><p>　　至此，我们爬虫的基本逻辑分析完成<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8">👏</span>，剩下的便是代码的编写部分了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 乃木坂 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/28/hello-world/"/>
      <url>/2020/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
